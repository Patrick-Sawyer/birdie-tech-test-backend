"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.recipientsController = void 0;
const express = require("express");
const mysql = require("mysql");
const db_1 = require("../db");
exports.recipientsController = express.Router();
const payloadStringToJsObject = (rows) => {
    return rows.map((row) => {
        return {
            payload: JSON.parse(row.payload),
            timestamp: row.timestamp
        };
    });
};
const getRecipientIds = (results) => {
    let array = [];
    results.forEach((observation) => {
        let id = observation.payload.care_recipient_id;
        if (!array.includes(id)) {
            array.push(id);
        }
    });
    return array;
};
exports.recipientsController.get('/recipients', (_, res) => {
    res.header("Access-Control-Allow-Origin", "*");
    const connection = mysql.createConnection(db_1.default);
    connection.connect((err) => {
        if (err)
            throw err;
        connection.query('SELECT payload FROM events', (err, rows) => {
            if (err)
                throw err;
            let results = payloadStringToJsObject(rows);
            let recipients = getRecipientIds(results);
            return res.status(200).json(recipients);
        });
        connection.end();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjaXBpZW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cm9sbGVycy9yZWNpcGllbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFtQztBQUNuQywrQkFBK0I7QUFDL0IsOEJBQTZCO0FBRWhCLFFBQUEsb0JBQW9CLEdBQW1CLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQXdCckUsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLElBQVcsRUFBZSxFQUFFO0lBQzNELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFO1FBQzNCLE9BQU87WUFDTCxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO1lBQ2hDLFNBQVMsRUFBRSxHQUFHLENBQUMsU0FBUztTQUN6QixDQUFBO0lBQ0gsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUE7QUFFRCxNQUFNLGVBQWUsR0FBRyxDQUFDLE9BQW9CLEVBQVksRUFBRTtJQUN6RCxJQUFJLEtBQUssR0FBYSxFQUFFLENBQUM7SUFDekIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQXNCLEVBQUUsRUFBRTtRQUN6QyxJQUFJLEVBQUUsR0FBVyxXQUFXLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1FBQ3ZELElBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFDO1lBQ3JCLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7U0FDZjtJQUNILENBQUMsQ0FBQyxDQUFBO0lBQ0YsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUE7QUFJRCw0QkFBb0IsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQXFCLEVBQVEsRUFBRTtJQUV6RSxHQUFHLENBQUMsTUFBTSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFRLENBQUMsQ0FBQztJQUVwRCxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUU7UUFDNUIsSUFBSSxHQUFHO1lBQUUsTUFBTSxHQUFHLENBQUM7UUFFbkIsVUFBVSxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsRUFBRSxDQUFDLEdBQVEsRUFBRSxJQUFXLEVBQUUsRUFBRTtZQUNyRSxJQUFJLEdBQUc7Z0JBQUUsTUFBTSxHQUFHLENBQUM7WUFDbkIsSUFBSSxPQUFPLEdBQWdCLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pELElBQUksVUFBVSxHQUFhLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNwRCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO1FBRUwsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgKiBhcyBteXNxbCBmcm9tIFwibXlzcWxcIjtcbmltcG9ydCBkYkNvbmZpZyBmcm9tIFwiLi4vZGJcIjtcblxuZXhwb3J0IGNvbnN0IHJlY2lwaWVudHNDb250cm9sbGVyOiBleHByZXNzLlJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5cbi8vIElOVEVSRkFDRUVTXG5cbmludGVyZmFjZSBSb3dQYXJzZWQge1xuICBwYXlsb2FkOiB7XG4gICAgZXZlbnRfdHlwZTogc3RyaW5nO1xuICAgIG5vdGU6IHN0cmluZztcbiAgICBtb29kOiBzdHJpbmc7XG4gICAgdGFza19zY2hlZHVsZV9ub3RlOiBzdHJpbmc7XG4gICAgdGFza19kZWZpbml0aW9uX2Rlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgb2JzZXJ2ZWQ6IHN0cmluZztcbiAgICBmbHVpZDogc3RyaW5nO1xuICAgIGNhcmVfcmVjaXBpZW50X2lkOiBzdHJpbmc7XG4gIH07XG59XG5cbmludGVyZmFjZSBSb3cge1xuICBwYXlsb2FkOiBzdHJpbmc7XG4gIHRpbWVzdGFtcDogc3RyaW5nO1xufVxuXG4vLyBBQlNUUkFDVEVEIEZVTkNUSU9OUyBGT1IgU09SVElORyBEQVRBXG5cbmNvbnN0IHBheWxvYWRTdHJpbmdUb0pzT2JqZWN0ID0gKHJvd3M6IFJvd1tdKTogUm93UGFyc2VkW10gPT4ge1xuICByZXR1cm4gcm93cy5tYXAoKHJvdzogUm93KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBheWxvYWQ6IEpTT04ucGFyc2Uocm93LnBheWxvYWQpLFxuICAgICAgdGltZXN0YW1wOiByb3cudGltZXN0YW1wXG4gICAgfVxuICB9KVxufVxuXG5jb25zdCBnZXRSZWNpcGllbnRJZHMgPSAocmVzdWx0czogUm93UGFyc2VkW10pOiBzdHJpbmdbXSA9PiB7XG4gIGxldCBhcnJheTogc3RyaW5nW10gPSBbXTtcbiAgcmVzdWx0cy5mb3JFYWNoKChvYnNlcnZhdGlvbjogUm93UGFyc2VkKSA9PiB7XG4gICAgbGV0IGlkOiBzdHJpbmcgPSBvYnNlcnZhdGlvbi5wYXlsb2FkLmNhcmVfcmVjaXBpZW50X2lkO1xuICAgIGlmKCFhcnJheS5pbmNsdWRlcyhpZCkpe1xuICAgICAgYXJyYXkucHVzaChpZClcbiAgICB9XG4gIH0pXG4gIHJldHVybiBhcnJheTtcbn1cblxuLy8gRU5EUE9JTlRcblxucmVjaXBpZW50c0NvbnRyb2xsZXIuZ2V0KCcvcmVjaXBpZW50cycsIChfLCByZXM6IGV4cHJlc3MuUmVzcG9uc2UpOiB2b2lkID0+IHtcblxuICByZXMuaGVhZGVyKFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCIsIFwiKlwiKTtcbiAgY29uc3QgY29ubmVjdGlvbiA9IG15c3FsLmNyZWF0ZUNvbm5lY3Rpb24oZGJDb25maWcpO1xuXG4gIGNvbm5lY3Rpb24uY29ubmVjdCgoZXJyOiBhbnkpID0+IHtcbiAgICAgIGlmIChlcnIpIHRocm93IGVycjtcblxuICAgICAgY29ubmVjdGlvbi5xdWVyeSgnU0VMRUNUIHBheWxvYWQgRlJPTSBldmVudHMnLCAoZXJyOiBhbnksIHJvd3M6IFJvd1tdKSA9PiB7XG4gICAgICAgICAgaWYgKGVycikgdGhyb3cgZXJyO1xuICAgICAgICAgIGxldCByZXN1bHRzOiBSb3dQYXJzZWRbXSA9IHBheWxvYWRTdHJpbmdUb0pzT2JqZWN0KHJvd3MpO1xuICAgICAgICAgIGxldCByZWNpcGllbnRzOiBzdHJpbmdbXSA9IGdldFJlY2lwaWVudElkcyhyZXN1bHRzKTtcbiAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24ocmVjaXBpZW50cyk7XG4gICAgICAgIH0pO1xuXG4gICAgICBjb25uZWN0aW9uLmVuZCgpO1xuICB9KTtcbn0pOyJdfQ==