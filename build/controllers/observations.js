"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.observationsController = void 0;
const express = require("express");
const mysql = require("mysql");
const db_1 = require("../db");
exports.observationsController = express.Router();
const payloadStringToJsObject = (rows) => {
    return rows.map((row) => {
        return {
            payload: JSON.parse(row.payload),
            timestamp: row.timestamp
        };
    });
};
const getObservationCounts = (rows) => {
    let observationCount = {};
    rows.forEach((row) => {
        let type = row.payload.event_type;
        if (type in observationCount) {
            observationCount[type]++;
        }
        else {
            observationCount[type] = 1;
        }
    });
    return observationCount;
};
const filterByType = (results, type) => {
    return results.filter((row) => {
        return row.payload.event_type == type;
    });
};
const getPage = (results, page) => {
    let pageNumber = parseInt(page);
    let firstRow = 20 * pageNumber;
    return results.slice(firstRow, firstRow + 20);
};
const structureDataForResponse = (results) => {
    return results.map((row) => {
        return {
            note: row.payload.note,
            mood: row.payload.mood,
            timestamp: row.timestamp,
            taskNote: row.payload.task_schedule_note,
            taskDefinition: row.payload.task_definition_description,
            fluidsObserved: row.payload.observed,
            fluidType: row.payload.fluid
        };
    });
};
exports.observationsController.get('/observations', (req, res) => {
    res.header("Access-Control-Allow-Origin", "*");
    const { recipient, page, type, count } = req.query;
    const connection = mysql.createConnection(db_1.default);
    connection.connect((err) => {
        if (err)
            throw err;
        let recipientQuery = recipient ? ' WHERE care_recipient_id="' + recipient + '"' : '';
        connection.query('SELECT payload, timestamp FROM events' + recipientQuery + ' ORDER BY timestamp DESC', (err, rows) => {
            if (err)
                throw err;
            let results = payloadStringToJsObject(rows);
            if (count) {
                let observationCount = getObservationCounts(results);
                return res.status(200).json(observationCount);
            }
            if (type) {
                results = filterByType(results, type);
            }
            if (page) {
                results = getPage(results, page);
            }
            let modified = structureDataForResponse(results);
            return res.status(200).json(modified);
        });
        connection.end();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzZXJ2YXRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnRyb2xsZXJzL29ic2VydmF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBbUM7QUFDbkMsK0JBQStCO0FBQy9CLDhCQUE2QjtBQUVoQixRQUFBLHNCQUFzQixHQUFtQixPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7QUErQ3ZFLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxJQUFXLEVBQWUsRUFBRTtJQUMzRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRTtRQUMzQixPQUFPO1lBQ0wsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQztZQUNoQyxTQUFTLEVBQUUsR0FBRyxDQUFDLFNBQVM7U0FDekIsQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFBO0FBRUQsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLElBQWlCLEVBQVMsRUFBRTtJQUN4RCxJQUFJLGdCQUFnQixHQUFVLEVBQUUsQ0FBQztJQUNqQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBYyxFQUFFLEVBQUU7UUFDNUIsSUFBSSxJQUFJLEdBQVcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDMUMsSUFBRyxJQUFJLElBQUksZ0JBQWdCLEVBQUM7WUFDMUIsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztTQUMxQjthQUFJO1lBQ0gsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzVCO0lBQ0wsQ0FBQyxDQUFDLENBQUE7SUFDRixPQUFPLGdCQUFnQixDQUFDO0FBQzFCLENBQUMsQ0FBQTtBQUVELE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBb0IsRUFBRSxJQUFZLEVBQWUsRUFBRTtJQUN2RSxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMs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LENBQUMsQ0FBQyxDQUFDO1FBRUwsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgKiBhcyBteXNxbCBmcm9tIFwibXlzcWxcIjtcbmltcG9ydCBkYkNvbmZpZyBmcm9tIFwiLi4vZGJcIjtcblxuZXhwb3J0IGNvbnN0IG9ic2VydmF0aW9uc0NvbnRyb2xsZXI6IGV4cHJlc3MuUm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcblxuLy8gSU5URVJGQUNFRVNcblxuaW50ZXJmYWNlIFJvd1BhcnNlZCB7XG4gIHBheWxvYWQ6IHtcbiAgICBldmVudF90eXBlOiBzdHJpbmc7XG4gICAgbm90ZTogc3RyaW5nO1xuICAgIG1vb2Q6IHN0cmluZztcbiAgICB0YXNrX3NjaGVkdWxlX25vdGU6IHN0cmluZztcbiAgICB0YXNrX2RlZmluaXRpb25fZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBvYnNlcnZlZDogc3RyaW5nO1xuICAgIGZsdWlkOiBzdHJpbmc7XG4gICAgY2FyZV9yZWNpcGllbnRfaWQ6IHN0cmluZztcbiAgfTtcbiAgdGltZXN0YW1wOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBSb3dNb2RpZmllZCB7XG4gIG5vdGU6IHN0cmluZztcbiAgbW9vZDogc3RyaW5nO1xuICB0aW1lc3RhbXA6IHN0cmluZztcbiAgdGFza05vdGU6IHN0cmluZztcbiAgdGFza0RlZmluaXRpb246IHN0cmluZztcbiAgZmx1aWRzT2JzZXJ2ZWQ6IHN0cmluZztcbiAgZmx1aWRUeXBlOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBSb3cge1xuICBwYXlsb2FkOiBzdHJpbmc7XG4gIHRpbWVzdGFtcDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgQ291bnQgeyBcbiAgW2tleTogc3RyaW5nXTogbnVtYmVyOyBcbn1cblxuaW50ZXJmYWNlIFF1ZXJ5IHtcbiAgcmVjaXBpZW50OiBzdHJpbmc7XG4gIHBhZ2U6IHN0cmluZztcbiAgdHlwZTogc3RyaW5nOyBcbiAgY291bnQ6IGJvb2xlYW47XG4gIHBhdGllbnRzOiBib29sZWFuO1xufVxuXG4vLyBBQlNUUkFDVEVEIEZVTkNUSU9OUyBGT1IgU09SVElORyBEQVRBXG5cbmNvbnN0IHBheWxvYWRTdHJpbmdUb0pzT2JqZWN0ID0gKHJvd3M6IFJvd1tdKTogUm93UGFyc2VkW10gPT4ge1xuICByZXR1cm4gcm93cy5tYXAoKHJvdzogUm93KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBheWxvYWQ6IEpTT04ucGFyc2Uocm93LnBheWxvYWQpLFxuICAgICAgdGltZXN0YW1wOiByb3cudGltZXN0YW1wXG4gICAgfVxuICB9KVxufVxuXG5jb25zdCBnZXRPYnNlcnZhdGlvbkNvdW50cyA9IChyb3dzOiBSb3dQYXJzZWRbXSk6IENvdW50ID0+IHtcbiAgbGV0IG9ic2VydmF0aW9uQ291bnQ6IENvdW50ID0ge307XG4gIHJvd3MuZm9yRWFjaCgocm93OiBSb3dQYXJzZWQpID0+IHtcbiAgICAgIGxldCB0eXBlOiBzdHJpbmcgPSByb3cucGF5bG9hZC5ldmVudF90eXBlO1xuICAgICAgaWYodHlwZSBpbiBvYnNlcnZhdGlvbkNvdW50KXtcbiAgICAgICAgb2JzZXJ2YXRpb25Db3VudFt0eXBlXSsrO1xuICAgICAgfWVsc2V7XG4gICAgICAgIG9ic2VydmF0aW9uQ291bnRbdHlwZV0gPSAxO1xuICAgICAgfVxuICB9KVxuICByZXR1cm4gb2JzZXJ2YXRpb25Db3VudDtcbn1cblxuY29uc3QgZmlsdGVyQnlUeXBlID0gKHJlc3VsdHM6IFJvd1BhcnNlZFtdLCB0eXBlOiBzdHJpbmcpOiBSb3dQYXJzZWRbXSA9PiB7XG4gIHJldHVybiByZXN1bHRzLmZpbHRlcigocm93OiBSb3dQYXJzZWQpID0+IHtcbiAgICByZXR1cm4gcm93LnBheWxvYWQuZXZlbnRfdHlwZSA9PSB0eXBlXG4gIH0pXG59XG5cbmNvbnN0IGdldFBhZ2UgPSAocmVzdWx0czogUm93UGFyc2VkW10sIHBhZ2U6IHN0cmluZykgPT4ge1xuICBsZXQgcGFnZU51bWJlcjogbnVtYmVyID0gcGFyc2VJbnQocGFnZSk7XG4gIGxldCBmaXJzdFJvdzogbnVtYmVyID0gMjAgKiBwYWdlTnVtYmVyOyBcbiAgcmV0dXJuIHJlc3VsdHMuc2xpY2UoZmlyc3RSb3csIGZpcnN0Um93ICsgMjApO1xufVxuXG5jb25zdCBzdHJ1Y3R1cmVEYXRhRm9yUmVzcG9uc2UgPSAocmVzdWx0czogUm93UGFyc2VkW10pOiBSb3dNb2RpZmllZFtdID0+IHtcbiAgcmV0dXJuIHJlc3VsdHMubWFwKChyb3c6IFJvd1BhcnNlZCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBub3RlOiByb3cucGF5bG9hZC5ub3RlLFxuICAgICAgbW9vZDogcm93LnBheWxvYWQubW9vZCxcbiAgICAgIHRpbWVzdGFtcDogcm93LnRpbWVzdGFtcCxcbiAgICAgIHRhc2tOb3RlOiByb3cucGF5bG9hZC50YXNrX3NjaGVkdWxlX25vdGUsXG4gICAgICB0YXNrRGVmaW5pdGlvbjogcm93LnBheWxvYWQudGFza19kZWZpbml0aW9uX2Rlc2NyaXB0aW9uLFxuICAgICAgZmx1aWRzT2JzZXJ2ZWQ6IHJvdy5wYXlsb2FkLm9ic2VydmVkLFxuICAgICAgZmx1aWRUeXBlOiByb3cucGF5bG9hZC5mbHVpZFxuICAgIH1cbiAgfSlcbn1cblxuLy8gRU5EUE9JTlRcblxub2JzZXJ2YXRpb25zQ29udHJvbGxlci5nZXQoJy9vYnNlcnZhdGlvbnMnLCAocmVxOiBleHByZXNzLlJlcXVlc3Q8e30se30se30sIFF1ZXJ5PiwgcmVzOiBleHByZXNzLlJlc3BvbnNlKTogdm9pZCA9PiB7XG5cbiAgcmVzLmhlYWRlcihcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiLCBcIipcIik7XG4gIGNvbnN0IHsgcmVjaXBpZW50LCBwYWdlLCB0eXBlLCBjb3VudCB9ID0gcmVxLnF1ZXJ5O1xuICBjb25zdCBjb25uZWN0aW9uID0gbXlzcWwuY3JlYXRlQ29ubmVjdGlvbihkYkNvbmZpZyk7XG5cbiAgY29ubmVjdGlvbi5jb25uZWN0KChlcnI6IGFueSkgPT4ge1xuICAgICAgaWYgKGVycikgdGhyb3cgZXJyO1xuXG4gICAgICBsZXQgcmVjaXBpZW50UXVlcnk6IHN0cmluZyA9IHJlY2lwaWVudCA/ICcgV0hFUkUgY2FyZV9yZWNpcGllbnRfaWQ9XCInICsgcmVjaXBpZW50ICsgJ1wiJyA6ICcnO1xuXG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KCdTRUxFQ1QgcGF5bG9hZCwgdGltZXN0YW1wIEZST00gZXZlbnRzJyArIHJlY2lwaWVudFF1ZXJ5ICsgJyBPUkRFUiBCWSB0aW1lc3RhbXAgREVTQycsIChlcnI6IGFueSwgcm93czogUm93W10pID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSB0aHJvdyBlcnI7XG5cbiAgICAgICAgICBsZXQgcmVzdWx0czogUm93UGFyc2VkW10gPSBwYXlsb2FkU3RyaW5nVG9Kc09iamVjdChyb3dzKTtcblxuICAgICAgICAgIGlmKGNvdW50KXtcbiAgICAgICAgICAgIGxldCBvYnNlcnZhdGlvbkNvdW50OiBDb3VudCA9IGdldE9ic2VydmF0aW9uQ291bnRzKHJlc3VsdHMpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKG9ic2VydmF0aW9uQ291bnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICBpZih0eXBlKXtcbiAgICAgICAgICAgIHJlc3VsdHMgPSBmaWx0ZXJCeVR5cGUocmVzdWx0cywgdHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGlmKHBhZ2Upe1xuICAgICAgICAgICAgcmVzdWx0cyA9IGdldFBhZ2UocmVzdWx0cywgcGFnZSk7XG4gICAgICAgICAgfVxuICAgICAgXG4gICAgICAgICAgbGV0IG1vZGlmaWVkOiBSb3dNb2RpZmllZFtdID0gc3RydWN0dXJlRGF0YUZvclJlc3BvbnNlKHJlc3VsdHMpO1xuXG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKG1vZGlmaWVkKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIGNvbm5lY3Rpb24uZW5kKCk7XG4gIH0pO1xufSk7Il19